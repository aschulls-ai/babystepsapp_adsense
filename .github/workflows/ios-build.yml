name: Build iOS App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.yarn/cache
        key: ${{ runner.os }}-ios-node20-yarn-${{ hashFiles('frontend/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-ios-node20-yarn-
          ${{ runner.os }}-ios-yarn-
          ${{ runner.os }}-yarn-
        
    - name: Verify project structure
      run: |
        echo "Checking project structure..."
        ls -la
        echo "Frontend directory contents:"
        ls -la frontend/
        echo "Checking for yarn.lock:"
        test -f frontend/yarn.lock && echo "✅ yarn.lock found" || echo "❌ yarn.lock missing"
        
    - name: Install dependencies
      working-directory: ./frontend
      run: |
        echo "Installing frontend dependencies..."
        yarn install --frozen-lockfile --network-timeout 300000
        echo "Dependencies installed successfully"
      
    - name: Configure environment for production
      working-directory: ./frontend
      run: |
        echo "Configuring production environment..."
        echo "REACT_APP_BACKEND_URL=https://babystepsapp.app/api" > .env.production
        echo "REACT_APP_ADSENSE_CLIENT_ID=ca-pub-1934622676928053" >> .env.production
        echo "GENERATE_SOURCEMAP=false" >> .env.production
        echo "CI=false" >> .env.production
        cp .env.production .env.local
        echo "Environment configured for iOS build"
      
    - name: Build React app
      working-directory: ./frontend
      run: yarn build
        
    - name: Setup iOS development environment
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        
    - name: Install CocoaPods
      run: |
        echo "Installing CocoaPods..."
        sudo gem install cocoapods
        echo "CocoaPods installed: $(pod --version)"
        
    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: |
          frontend/ios/App/Pods
          ~/.cocoapods
        key: ${{ runner.os }}-ios-cocoapods-${{ hashFiles('frontend/ios/App/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-ios-cocoapods-
          ${{ runner.os }}-cocoapods-
      
    - name: Verify Capacitor Dependencies
      working-directory: ./frontend
      run: |
        echo "Verifying Capacitor dependencies..."
        
        # Check if Capacitor dependencies are installed
        echo "Checking @capacitor/cli..."
        if ! yarn list @capacitor/cli > /dev/null 2>&1; then
          echo "❌ @capacitor/cli not found in package.json dependencies"
          exit 1
        fi
        
        echo "Checking @capacitor/ios..."
        if ! yarn list @capacitor/ios > /dev/null 2>&1; then
          echo "❌ @capacitor/ios not found in package.json dependencies"
          exit 1
        fi
        
        # Verify Capacitor CLI is accessible
        npx cap --version
        echo "✅ All Capacitor dependencies verified"
        
    - name: Add iOS platform (if not exists)
      working-directory: ./frontend
      run: |
        echo "Checking for iOS platform..."
        if [ ! -d "ios" ]; then
          echo "iOS platform not found. Adding iOS platform..."
          npx cap add ios
          echo "iOS platform added successfully"
        else
          echo "✅ iOS platform already exists"
        fi
        
    - name: Sync Capacitor
      working-directory: ./frontend
      run: |
        echo "Syncing Capacitor for iOS..."
        
        # Ensure capacitor config exists
        if [ ! -f "capacitor.config.json" ] && [ ! -f "capacitor.config.ts" ] && [ ! -f "capacitor.config.js" ]; then
          echo "❌ Capacitor config not found"
          echo "Available files:"
          ls -la
          exit 1
        fi
        
        echo "✅ Found capacitor config file"
        
        # Ensure build directory exists
        if [ ! -d "build" ]; then
          echo "❌ Build directory not found. Make sure 'yarn build' completed successfully"
          exit 1
        fi
        
        # Sync Capacitor
        npx cap sync ios
        echo "✅ Capacitor sync completed successfully"
      
    - name: Install iOS dependencies
      working-directory: ./frontend/ios/App
      run: |
        echo "Installing iOS CocoaPods dependencies..."
        echo "Current directory: $(pwd)"
        echo "Podfile exists: $(test -f Podfile && echo "✅" || echo "❌")"
        
        if [ ! -f Podfile ]; then
          echo "❌ Podfile not found!"
          ls -la
          exit 1
        fi
        
        echo "Installing pods..."
        pod install --repo-update --verbose
        echo "✅ iOS dependencies installed successfully"
      
    - name: Build iOS app
      working-directory: ./frontend
      run: |
        echo "🔨 Building iOS app..."
        
        # Verify workspace exists
        if [ ! -f "ios/App/App.xcworkspace" ]; then
          echo "❌ iOS workspace not found!"
          echo "Available files in ios/App/:"
          ls -la ios/App/
          exit 1
        fi
        
        # Create build directory
        mkdir -p ios/App/build
        
        echo "📱 Starting Xcode build process..."
        echo "Workspace: ios/App/App.xcworkspace"
        echo "Scheme: App"
        echo "Configuration: Release"
        
        # Build the app archive
        set -o pipefail
        xcodebuild -workspace ios/App/App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath ios/App/build/App.xcarchive \
          -allowProvisioningUpdates \
          clean archive | tee build.log
          
        echo "✅ iOS build completed successfully!"
          
    - name: Export IPA
      working-directory: ./frontend
      run: |
        # Check if APPLE_TEAM_ID is available
        if [ -z "${{ secrets.APPLE_TEAM_ID }}" ]; then
          echo "❌ APPLE_TEAM_ID secret not configured"
          echo "Skipping IPA export - code signing not set up"
          echo "Archive created successfully at: ios/App/build/App.xcarchive"
          exit 0
        fi
        
        # Create export options plist with team ID
        cat > ios/App/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>\${{ secrets.APPLE_TEAM_ID }}</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>signingStyle</key>
            <string>automatic</string>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath ios/App/build/App.xcarchive \
          -exportPath ios/App/build \
          -exportOptionsPlist ios/App/ExportOptions.plist
          
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: baby-steps-ios-${{ github.run_number }}
        path: frontend/ios/App/build/*.ipa
        retention-days: 30
        
    - name: Upload to TestFlight (Production only)
      if: github.event.inputs.build_type == 'production' && github.ref == 'refs/heads/main'
      working-directory: ./frontend
      run: |
        # Install altool (part of Xcode command line tools)
        xcrun altool --upload-app \
          --type ios \
          --file ios/App/build/*.ipa \
          --username "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_PASSWORD }}"